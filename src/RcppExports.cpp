// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dQSR2
arma::colvec dQSR2(const arma::colvec& SS1, const arma::colvec& SS2, const arma::mat& U, const arma::colvec& RR1, const arma::colvec& RR2, const arma::mat& V, const arma::mat& Y, const arma::cube& Lambda, const arma::colvec& beta, const arma::colvec& phi, const double& lam, const arma::colvec& WW, const arma::mat& Pmk, const arma::mat& Pmki1, const arma::mat& Pmki2, const arma::rowvec& Pk, const IntegerVector& Mi1Index, const IntegerVector& Mi2Index, const IntegerMatrix& Mi1, const IntegerMatrix& Mi2, const IntegerMatrix& EE, const arma::mat& Eta, const arma::mat& inv_sigma_SR1, const arma::mat& inv_sigma_SR2, const arma::mat& inv_sigma_UV, const double& nu_0, const double& eta_0);
RcppExport SEXP _WECAN_dQSR2(SEXP SS1SEXP, SEXP SS2SEXP, SEXP USEXP, SEXP RR1SEXP, SEXP RR2SEXP, SEXP VSEXP, SEXP YSEXP, SEXP LambdaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP lamSEXP, SEXP WWSEXP, SEXP PmkSEXP, SEXP Pmki1SEXP, SEXP Pmki2SEXP, SEXP PkSEXP, SEXP Mi1IndexSEXP, SEXP Mi2IndexSEXP, SEXP Mi1SEXP, SEXP Mi2SEXP, SEXP EESEXP, SEXP EtaSEXP, SEXP inv_sigma_SR1SEXP, SEXP inv_sigma_SR2SEXP, SEXP inv_sigma_UVSEXP, SEXP nu_0SEXP, SEXP eta_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS1(SS1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS2(SS2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR1(RR1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR2(RR2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type WW(WWSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki1(Pmki1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki2(Pmki2SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Mi1Index(Mi1IndexSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Mi2Index(Mi2IndexSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Mi1(Mi1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Mi2(Mi2SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type inv_sigma_SR1(inv_sigma_SR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type inv_sigma_SR2(inv_sigma_SR2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type inv_sigma_UV(inv_sigma_UVSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_0(nu_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_0(eta_0SEXP);
    rcpp_result_gen = Rcpp::wrap(dQSR2(SS1, SS2, U, RR1, RR2, V, Y, Lambda, beta, phi, lam, WW, Pmk, Pmki1, Pmki2, Pk, Mi1Index, Mi2Index, Mi1, Mi2, EE, Eta, inv_sigma_SR1, inv_sigma_SR2, inv_sigma_UV, nu_0, eta_0));
    return rcpp_result_gen;
END_RCPP
}
// QUVY
double QUVY(const arma::colvec& SS1, const arma::colvec& SS2, const arma::mat& U, const arma::colvec& RR1, const arma::colvec& RR2, const arma::mat& V, const arma::mat& Y, const arma::cube& Lambda, const arma::colvec& beta, const arma::colvec& phi, const double& lam, const arma::colvec& WW, const arma::mat& Pmk, const arma::rowvec& Pk, const IntegerMatrix& EE, const arma::mat& Eta, const arma::mat& sigma_SR1, const arma::mat& sigma_SR2, const arma::mat& sigma_UV, const arma::mat& SR1, const arma::mat& SR2, const arma::mat& UV, const double& nu_0, const double& eta_0);
RcppExport SEXP _WECAN_QUVY(SEXP SS1SEXP, SEXP SS2SEXP, SEXP USEXP, SEXP RR1SEXP, SEXP RR2SEXP, SEXP VSEXP, SEXP YSEXP, SEXP LambdaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP lamSEXP, SEXP WWSEXP, SEXP PmkSEXP, SEXP PkSEXP, SEXP EESEXP, SEXP EtaSEXP, SEXP sigma_SR1SEXP, SEXP sigma_SR2SEXP, SEXP sigma_UVSEXP, SEXP SR1SEXP, SEXP SR2SEXP, SEXP UVSEXP, SEXP nu_0SEXP, SEXP eta_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS1(SS1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS2(SS2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR1(RR1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR2(RR2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type WW(WWSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_SR1(sigma_SR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_SR2(sigma_SR2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_UV(sigma_UVSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SR1(SR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SR2(SR2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type UV(UVSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_0(nu_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_0(eta_0SEXP);
    rcpp_result_gen = Rcpp::wrap(QUVY(SS1, SS2, U, RR1, RR2, V, Y, Lambda, beta, phi, lam, WW, Pmk, Pk, EE, Eta, sigma_SR1, sigma_SR2, sigma_UV, SR1, SR2, UV, nu_0, eta_0));
    return rcpp_result_gen;
END_RCPP
}
// dQUVY
arma::colvec dQUVY(const arma::colvec& SS1, const arma::colvec& SS2, const arma::mat& U, const arma::colvec& RR1, const arma::colvec& RR2, const arma::mat& V, const arma::mat& Y, const arma::cube& Lambda, const arma::colvec& beta, const arma::colvec& phi, const double& lam, const arma::colvec& WW, const arma::mat& Pmk, const arma::mat& Pmki1, const arma::mat& Pmki2, const arma::rowvec& Pk, const IntegerVector& Mi1Index, const IntegerVector& Mi2Index, const IntegerMatrix& Mi1, const IntegerMatrix& Mi2, const IntegerMatrix& EE, const arma::mat& Eta, const arma::mat& inv_sigma_SR1, const arma::mat& inv_sigma_SR2, const arma::mat& inv_sigma_UV, const double& nu_0, const double& eta_0);
RcppExport SEXP _WECAN_dQUVY(SEXP SS1SEXP, SEXP SS2SEXP, SEXP USEXP, SEXP RR1SEXP, SEXP RR2SEXP, SEXP VSEXP, SEXP YSEXP, SEXP LambdaSEXP, SEXP betaSEXP, SEXP phiSEXP, SEXP lamSEXP, SEXP WWSEXP, SEXP PmkSEXP, SEXP Pmki1SEXP, SEXP Pmki2SEXP, SEXP PkSEXP, SEXP Mi1IndexSEXP, SEXP Mi2IndexSEXP, SEXP Mi1SEXP, SEXP Mi2SEXP, SEXP EESEXP, SEXP EtaSEXP, SEXP inv_sigma_SR1SEXP, SEXP inv_sigma_SR2SEXP, SEXP inv_sigma_UVSEXP, SEXP nu_0SEXP, SEXP eta_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS1(SS1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS2(SS2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR1(RR1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR2(RR2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type WW(WWSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki1(Pmki1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmki2(Pmki2SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Pk(PkSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Mi1Index(Mi1IndexSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Mi2Index(Mi2IndexSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Mi1(Mi1SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Mi2(Mi2SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type inv_sigma_SR1(inv_sigma_SR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type inv_sigma_SR2(inv_sigma_SR2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type inv_sigma_UV(inv_sigma_UVSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_0(nu_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_0(eta_0SEXP);
    rcpp_result_gen = Rcpp::wrap(dQUVY(SS1, SS2, U, RR1, RR2, V, Y, Lambda, beta, phi, lam, WW, Pmk, Pmki1, Pmki2, Pk, Mi1Index, Mi2Index, Mi1, Mi2, EE, Eta, inv_sigma_SR1, inv_sigma_SR2, inv_sigma_UV, nu_0, eta_0));
    return rcpp_result_gen;
END_RCPP
}
// computeEta
arma::mat computeEta(const arma::colvec& SS2, const arma::colvec& RR2, const arma::colvec& beta, const arma::mat& U, const arma::mat& V, const IntegerMatrix& EE, const arma::cube& Lambda, const int& K);
RcppExport SEXP _WECAN_computeEta(SEXP SS2SEXP, SEXP RR2SEXP, SEXP betaSEXP, SEXP USEXP, SEXP VSEXP, SEXP EESEXP, SEXP LambdaSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS2(SS2SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR2(RR2SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(computeEta(SS2, RR2, beta, U, V, EE, Lambda, K));
    return rcpp_result_gen;
END_RCPP
}
// computePmk_w
arma::mat computePmk_w(const arma::colvec& SS1, const arma::colvec& RR1, const arma::mat& U, const arma::mat& V, const arma::mat& Y, const IntegerMatrix& EE, const arma::colvec& WW, const arma::mat& Eta, const arma::mat& A_eta, const arma::colvec& a_phi, const arma::mat& Pr_w_eta, const arma::mat& h_phi, const double& lambda_a, const arma::rowvec& Elog_t_k, const double& E_t_0);
RcppExport SEXP _WECAN_computePmk_w(SEXP SS1SEXP, SEXP RR1SEXP, SEXP USEXP, SEXP VSEXP, SEXP YSEXP, SEXP EESEXP, SEXP WWSEXP, SEXP EtaSEXP, SEXP A_etaSEXP, SEXP a_phiSEXP, SEXP Pr_w_etaSEXP, SEXP h_phiSEXP, SEXP lambda_aSEXP, SEXP Elog_t_kSEXP, SEXP E_t_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS1(SS1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR1(RR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type WW(WWSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A_eta(A_etaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type a_phi(a_phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pr_w_eta(Pr_w_etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type h_phi(h_phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_a(lambda_aSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Elog_t_k(Elog_t_kSEXP);
    Rcpp::traits::input_parameter< const double& >::type E_t_0(E_t_0SEXP);
    rcpp_result_gen = Rcpp::wrap(computePmk_w(SS1, RR1, U, V, Y, EE, WW, Eta, A_eta, a_phi, Pr_w_eta, h_phi, lambda_a, Elog_t_k, E_t_0));
    return rcpp_result_gen;
END_RCPP
}
// computePmk_wn
arma::mat computePmk_wn(const arma::colvec& SS1, const arma::colvec& RR1, const arma::mat& U, const arma::mat& V, const arma::mat& Y, const IntegerMatrix& EE, const arma::colvec& WW, const arma::mat& Eta, const arma::mat& A_eta, const arma::colvec& a_phi, const arma::mat& Pr_w_eta, const arma::mat& h_phi, const double& lambda_a, const arma::rowvec& Elog_t_k, const double& E_t_0);
RcppExport SEXP _WECAN_computePmk_wn(SEXP SS1SEXP, SEXP RR1SEXP, SEXP USEXP, SEXP VSEXP, SEXP YSEXP, SEXP EESEXP, SEXP WWSEXP, SEXP EtaSEXP, SEXP A_etaSEXP, SEXP a_phiSEXP, SEXP Pr_w_etaSEXP, SEXP h_phiSEXP, SEXP lambda_aSEXP, SEXP Elog_t_kSEXP, SEXP E_t_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS1(SS1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR1(RR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type WW(WWSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A_eta(A_etaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type a_phi(a_phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pr_w_eta(Pr_w_etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type h_phi(h_phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_a(lambda_aSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Elog_t_k(Elog_t_kSEXP);
    Rcpp::traits::input_parameter< const double& >::type E_t_0(E_t_0SEXP);
    rcpp_result_gen = Rcpp::wrap(computePmk_wn(SS1, RR1, U, V, Y, EE, WW, Eta, A_eta, a_phi, Pr_w_eta, h_phi, lambda_a, Elog_t_k, E_t_0));
    return rcpp_result_gen;
END_RCPP
}
// evalConditionalLik_w
double evalConditionalLik_w(const IntegerVector& z, const arma::colvec& SS1, const arma::colvec& RR1, const arma::mat& U, const arma::mat& V, const arma::mat& Y, const arma::mat& Eta, const arma::colvec& WW, const arma::rowvec& alph, const arma::colvec& phi, const IntegerMatrix& EE, const arma::mat& Pmk);
RcppExport SEXP _WECAN_evalConditionalLik_w(SEXP zSEXP, SEXP SS1SEXP, SEXP RR1SEXP, SEXP USEXP, SEXP VSEXP, SEXP YSEXP, SEXP EtaSEXP, SEXP WWSEXP, SEXP alphSEXP, SEXP phiSEXP, SEXP EESEXP, SEXP PmkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS1(SS1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR1(RR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type WW(WWSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    rcpp_result_gen = Rcpp::wrap(evalConditionalLik_w(z, SS1, RR1, U, V, Y, Eta, WW, alph, phi, EE, Pmk));
    return rcpp_result_gen;
END_RCPP
}
// evalMargLogLik_w
double evalMargLogLik_w(const arma::colvec& SS1, const arma::colvec& RR1, const arma::mat& U, const arma::mat& V, const arma::mat& Y, const arma::mat& Eta, const arma::colvec& WW, const arma::rowvec& alph, const arma::colvec& phi, const IntegerMatrix& EE, const arma::mat& Pmk);
RcppExport SEXP _WECAN_evalMargLogLik_w(SEXP SS1SEXP, SEXP RR1SEXP, SEXP USEXP, SEXP VSEXP, SEXP YSEXP, SEXP EtaSEXP, SEXP WWSEXP, SEXP alphSEXP, SEXP phiSEXP, SEXP EESEXP, SEXP PmkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS1(SS1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR1(RR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type WW(WWSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    rcpp_result_gen = Rcpp::wrap(evalMargLogLik_w(SS1, RR1, U, V, Y, Eta, WW, alph, phi, EE, Pmk));
    return rcpp_result_gen;
END_RCPP
}
// evalMargPost_w
double evalMargPost_w(const arma::colvec& SS1, const arma::colvec& RR1, const arma::mat& SR1, const arma::mat& SR2, const arma::mat& UV, const arma::mat& U, const arma::mat& V, const arma::mat& Y, const arma::mat& Eta, const arma::mat& A_eta, const arma::colvec& a_phi, const arma::colvec& pi_phi, const arma::mat& Pr_w_eta, const arma::mat& log_h_phi, const arma::mat& sigma_SR1, const arma::mat& sigma_SR2, const arma::mat& sigma_UV, const arma::rowvec& alph, const IntegerMatrix& EE, const double& upsilon_SR1, const double& upsilon_SR2, const double& upsilon_UV, const arma::mat& Phi_SR1, const arma::mat& Phi_SR2, const arma::mat& Phi_UV, const arma::colvec& WW, const double& a_0, const arma::cube& Lambda, const double& lam, const double& A_0, const double& B_0, const arma::mat& Pmk);
RcppExport SEXP _WECAN_evalMargPost_w(SEXP SS1SEXP, SEXP RR1SEXP, SEXP SR1SEXP, SEXP SR2SEXP, SEXP UVSEXP, SEXP USEXP, SEXP VSEXP, SEXP YSEXP, SEXP EtaSEXP, SEXP A_etaSEXP, SEXP a_phiSEXP, SEXP pi_phiSEXP, SEXP Pr_w_etaSEXP, SEXP log_h_phiSEXP, SEXP sigma_SR1SEXP, SEXP sigma_SR2SEXP, SEXP sigma_UVSEXP, SEXP alphSEXP, SEXP EESEXP, SEXP upsilon_SR1SEXP, SEXP upsilon_SR2SEXP, SEXP upsilon_UVSEXP, SEXP Phi_SR1SEXP, SEXP Phi_SR2SEXP, SEXP Phi_UVSEXP, SEXP WWSEXP, SEXP a_0SEXP, SEXP LambdaSEXP, SEXP lamSEXP, SEXP A_0SEXP, SEXP B_0SEXP, SEXP PmkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type SS1(SS1SEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type RR1(RR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SR1(SR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SR2(SR2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type UV(UVSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Eta(EtaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A_eta(A_etaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type a_phi(a_phiSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type pi_phi(pi_phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pr_w_eta(Pr_w_etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_h_phi(log_h_phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_SR1(sigma_SR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_SR2(sigma_SR2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_UV(sigma_UVSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type alph(alphSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_SR1(upsilon_SR1SEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_SR2(upsilon_SR2SEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_UV(upsilon_UVSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Phi_SR1(Phi_SR1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Phi_SR2(Phi_SR2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Phi_UV(Phi_UVSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type WW(WWSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_0(a_0SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const double& >::type A_0(A_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type B_0(B_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    rcpp_result_gen = Rcpp::wrap(evalMargPost_w(SS1, RR1, SR1, SR2, UV, U, V, Y, Eta, A_eta, a_phi, pi_phi, Pr_w_eta, log_h_phi, sigma_SR1, sigma_SR2, sigma_UV, alph, EE, upsilon_SR1, upsilon_SR2, upsilon_UV, Phi_SR1, Phi_SR2, Phi_UV, WW, a_0, Lambda, lam, A_0, B_0, Pmk));
    return rcpp_result_gen;
END_RCPP
}
// getPmki
arma::mat getPmki(const arma::mat& Pmk, const IntegerVector& Mi1Index, const IntegerMatrix& Mi1);
RcppExport SEXP _WECAN_getPmki(SEXP PmkSEXP, SEXP Mi1IndexSEXP, SEXP Mi1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Pmk(PmkSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type Mi1Index(Mi1IndexSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type Mi1(Mi1SEXP);
    rcpp_result_gen = Rcpp::wrap(getPmki(Pmk, Mi1Index, Mi1));
    return rcpp_result_gen;
END_RCPP
}
// indexEdges
Rcpp::List indexEdges(const IntegerMatrix& EE, const int& n);
RcppExport SEXP _WECAN_indexEdges(SEXP EESEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type EE(EESEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(indexEdges(EE, n));
    return rcpp_result_gen;
END_RCPP
}
// mat_mult
arma::mat mat_mult(const arma::mat& A, const arma::mat& B);
RcppExport SEXP _WECAN_mat_mult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_mult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _WECAN_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _WECAN_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _WECAN_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _WECAN_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _WECAN_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WECAN_dQSR2", (DL_FUNC) &_WECAN_dQSR2, 27},
    {"_WECAN_QUVY", (DL_FUNC) &_WECAN_QUVY, 24},
    {"_WECAN_dQUVY", (DL_FUNC) &_WECAN_dQUVY, 27},
    {"_WECAN_computeEta", (DL_FUNC) &_WECAN_computeEta, 8},
    {"_WECAN_computePmk_w", (DL_FUNC) &_WECAN_computePmk_w, 15},
    {"_WECAN_computePmk_wn", (DL_FUNC) &_WECAN_computePmk_wn, 15},
    {"_WECAN_evalConditionalLik_w", (DL_FUNC) &_WECAN_evalConditionalLik_w, 12},
    {"_WECAN_evalMargLogLik_w", (DL_FUNC) &_WECAN_evalMargLogLik_w, 11},
    {"_WECAN_evalMargPost_w", (DL_FUNC) &_WECAN_evalMargPost_w, 32},
    {"_WECAN_getPmki", (DL_FUNC) &_WECAN_getPmki, 3},
    {"_WECAN_indexEdges", (DL_FUNC) &_WECAN_indexEdges, 2},
    {"_WECAN_mat_mult", (DL_FUNC) &_WECAN_mat_mult, 2},
    {"_WECAN_rcpp_hello_world", (DL_FUNC) &_WECAN_rcpp_hello_world, 0},
    {"_WECAN_rcpparma_hello_world", (DL_FUNC) &_WECAN_rcpparma_hello_world, 0},
    {"_WECAN_rcpparma_outerproduct", (DL_FUNC) &_WECAN_rcpparma_outerproduct, 1},
    {"_WECAN_rcpparma_innerproduct", (DL_FUNC) &_WECAN_rcpparma_innerproduct, 1},
    {"_WECAN_rcpparma_bothproducts", (DL_FUNC) &_WECAN_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_WECAN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
