cex.lab = 2,
cex.main = 2,
pch = 16,
cex = 0.5)
axis(1,
at = 1:3*2 - 0.5,
labels = beta_true,
cex.axis = 2)
points(x = 1:3*2 - 0.5,
y = beta_true,
pch = 8)
beta_true = 0:2/2
library(dplyr)
library(magrittr)
library(tibble)
library(ggplot2)
library(gridExtra)
library(viridis)
all_results =
readRDS("A:/ladie_helpers/RDS/dare/collated.RDS")
## Errors:
all_results %>%
filter(estimand == "beta1",
estimated_model != "exp") %>%
group_by(sigma,alpha,
true_model,estimated_model) %>%
summarize(n_errors = sum(errors),
n_valid = sum(!errors),
mean_no_errors = mean(!errors)) %>%
print(n = Inf)
## Coverage and MSE
bp_results =
all_results %>%
mutate(sim = rep(1:(nrow(all_results)/18),each = 18)) %>%
mutate(true_model =
paste(true_model,
"(",
sigma,
",",
alpha,
")",
sep = "")) %>%
mutate(true_model =
ifelse(grepl("exp",true_model),
substr(true_model,1,5) %>%
paste(")",sep=""),
true_model)) %>%
filter(estimated_model != "exp") %>%
group_by(sim,true_model) %>%
mutate(any_errors = any(errors)) %>%
ungroup() %>%
filter(!any_errors) %>%
mutate(data_id = paste(true_model,sim,sep = "_")) %>%
# print(n = Inf)
knitr::kable(format = "latex",
booktabs = TRUE,
digits = 3)
## Coverage and MSE
bp_results =
all_results %>%
mutate(sim = rep(1:(nrow(all_results)/18),each = 18)) %>%
mutate(true_model =
paste(true_model,
"(",
sigma,
",",
alpha,
")",
sep = "")) %>%
mutate(true_model =
ifelse(grepl("exp",true_model),
substr(true_model,1,5) %>%
paste(")",sep=""),
true_model)) %>%
filter(estimated_model != "exp") %>%
group_by(sim,true_model) %>%
mutate(any_errors = any(errors)) %>%
ungroup() %>%
filter(!any_errors) %>%
mutate(data_id = paste(true_model,sim,sep = "_")) %>%
# print(n = Inf)
knitr::kable(format = "latex",
booktabs = TRUE,
digits = 3)
bp_results
## Coverage and MSE
bp_results =
all_results %>%
mutate(sim = rep(1:(nrow(all_results)/18),each = 18)) %>%
mutate(true_model =
paste(true_model,
"(",
sigma,
",",
alpha,
")",
sep = "")) %>%
mutate(true_model =
ifelse(grepl("exp",true_model),
substr(true_model,1,5) %>%
paste(")",sep=""),
true_model)) %>%
filter(estimated_model != "exp") %>%
group_by(sim,true_model) %>%
mutate(any_errors = any(errors)) %>%
ungroup() %>%
filter(!any_errors) %>%
mutate(data_id = paste(true_model,sim,sep = "_")) #%>%
str(bp_results)
bp_results_for_plotting =
bp_results %>%
mutate(estimated_model =
case_match(estimated_model,
"naive" ~ "Comp. log-log",
"bp" ~ "DARE")) %>%
group_by(true_model,
estimated_model) %>%
summarize(coverage_rate = mean(coverage))
bp_results_for_plotting %>%
ggplot(aes(x = true_model,
y = coverage_rate)) +
geom_hline(yintercept = 0.95,
linewidth = 1.5,
linetype = "dashed",
color = "gray") +  # Add horizontal line
geom_vline(xintercept = seq_along(unique(bp_results_for_plotting$true_model)),
alpha = 0.25) +  # Add vertical lines
geom_point(aes(color = estimated_model,
shape = estimated_model),
size = 6) +
scale_color_viridis(discrete = TRUE) +
theme_classic() +
theme(
axis.title = element_text(size = 16),  # Adjust axis title size
axis.text = element_text(size = 16, angle = 45, hjust = 1),  # Adjust axis text size
legend.title = element_text(size = 16),  # Adjust legend title size
legend.text = element_text(size = 14),  # Adjust legend text size
legend.position = "bottom"  # Change legend position
) +
labs(
x = "True Model",  # Change x-axis label
y = "Coverage Rate",  # Change y-axis label
color = "Estimated Model",  # Change legend title
shape = "Estimated Model"  # Change legend title
) +
ylim(0.4,1)
bp_plots = list()
bp_plots[[1]] =
bp_results %>%
filter(estimand == "beta1") %>%
mutate(estimated_model =
case_match(estimated_model,
"naive" ~ "Comp. log-log",
"bp" ~ "DARE")) %>%
ggplot(aes(x = true_model,
y = estimate)) +
geom_vline(xintercept = seq_along(unique(bp_results_for_plotting$true_model)),
alpha = 0.25) +
geom_boxplot(aes(color = estimated_model),
outliers = FALSE) +
geom_hline(yintercept = beta_true[1],
linewidth = 1.5,
linetype = "dashed",
color = "gray") +
scale_color_viridis(discrete = TRUE) +
theme_classic() +
theme(
axis.title = element_text(size = 8),  # Adjust axis title size
axis.text = element_text(size = 8, angle = 45, hjust = 1),  # Adjust axis text size
legend.position = "none"  # Change legend position
) +
labs(
x = "True Model",  # Change x-axis label
y = "Estimate",  # Change y-axis label
color = "Estimated Model",  # Change legend title
shape = "Estimated Model"  # Change legend title
)
bp_plots[[2]] =
bp_results %>%
mutate(estimated_model =
case_match(estimated_model,
"naive" ~ "Comp. log-log",
"bp" ~ "DARE")) %>%
filter(estimand == "beta2") %>%
ggplot(aes(x = true_model,
y = estimate)) +
geom_vline(xintercept = seq_along(unique(bp_results_for_plotting$true_model)),
alpha = 0.25) +
geom_boxplot(aes(color = estimated_model),
outliers = FALSE) +
geom_hline(yintercept = beta_true[2],
linewidth = 1.5,
linetype = "dashed",
color = "gray") +
scale_color_viridis(discrete = TRUE) +
theme_classic() +
theme(
axis.title = element_text(size = 8),  # Adjust axis title size
axis.text = element_text(size = 8, angle = 45, hjust = 1),  # Adjust axis text size
legend.position = "none"  # Change legend position
) +
labs(
x = "True Model",  # Change x-axis label
y = "Estimate",  # Change y-axis label
color = "Estimated Model",  # Change legend title
shape = "Estimated Model"  # Change legend title
)
bp_plots[[3]] =
bp_results %>%
mutate(estimated_model =
case_match(estimated_model,
"naive" ~ "Comp. log-log",
"bp" ~ "DARE")) %>%
filter(estimand == "beta3") %>%
ggplot(aes(x = true_model,
y = estimate)) +
geom_vline(xintercept = seq_along(unique(bp_results_for_plotting$true_model)),
alpha = 0.25) +
geom_boxplot(aes(color = estimated_model),
outliers = FALSE) +
geom_hline(yintercept = beta_true[3],
linewidth = 1.5,
linetype = "dashed",
color = "gray") +
scale_color_viridis(discrete = TRUE) +
theme_classic() +
theme(
axis.title = element_text(size = 8),  # Adjust axis title size
axis.text = element_text(size = 8, angle = 45, hjust = 1),  # Adjust axis text size
legend.title = element_text(size = 8),  # Adjust legend title size
legend.text = element_text(size = 7),  # Adjust legend text size
legend.position = "bottom"  # Change legend position
) +
labs(
x = "True Model",  # Change x-axis label
y = "Estimate",  # Change y-axis label
color = "Estimated Model",  # Change legend title
shape = "Estimated Model"  # Change legend title
)
bp_plots[[1]]
png("C:/Users/dksewell/Documents/ladie_helpers/img/sim_study-estimates-b0.png",
height = 2500,#/sqrt(2),
width = 2500,#*sqrt(2),
res = 300)
png("C:/Users/dksewell/Documents/dare_helpers/img/sim_study-estimates-b0.png",
height = 2500,#/sqrt(2),
width = 2500,#*sqrt(2),
res = 300)
bp_plots[[1]]
dev.off()
bp_plots[[2]]
bp_plots[[3]]
bp_plots[[2]]
bp_plots[[3]]
png("C:/Users/dksewell/Documents/dare_helpers/img/sim_study-estimates-b00.png",
height = 2500,#/sqrt(2),
width = 2500,#*sqrt(2),
res = 300)
bp_plots[[1]]
dev.off()
png("C:/Users/dksewell/Documents/dare_helpers/img/sim_study-estimates-b05.png",
height = 2500,#/sqrt(2),
width = 2500,#*sqrt(2),
res = 300)
bp_plots[[2]]
dev.off()
png("C:/Users/dksewell/Documents/dare_helpers/img/sim_study-estimates-b10.png",
height = 2500,#/sqrt(2),
width = 2500,#*sqrt(2),
res = 300)
bp_plots[[3]]
dev.off()
png("C:/Users/dksewell/Documents/dare_helpers/img/sim_study-estimates-b00.png",
height = 2500/sqrt(2),
width = 2500*sqrt(2),
res = 300)
bp_plots[[1]]
dev.off()
png("C:/Users/dksewell/Documents/dare_helpers/img/sim_study-estimates-b05.png",
height = 2500/sqrt(2),
width = 2500*sqrt(2),
res = 300)
bp_plots[[2]]
dev.off()
png("C:/Users/dksewell/Documents/dare_helpers/img/sim_study-estimates-b10.png",
height = 2500/sqrt(2),
width = 2500*sqrt(2),
res = 300)
bp_plots[[3]]
dev.off()
pacman::p_unload(all)
library(tidyverse)
library(magrittr)
library(dare)
remotes::install_github("dksewell/dare")
remotes::install_github("dksewell/dose_accrual")
remotes::install_github("dksewell/dare")
library(tidyverse)
library(magrittr)
library(dare)
library(parallel)
2+2
install.packages("bslib")
bslib::bs_theme_preview()
install.packages("bsicons")
bslib::bs_theme_preview()
?bs_theme
runApp('C:/Users/dksewell/Documents/PRC/projects/study_design_webapp/decision_tree/Shiny_app1.R')
install.packages("rgpt3")
runApp('C:/Users/dksewell/Documents/PRC/projects/study_design_webapp/decision_tree/Shiny_app1.R')
runApp('Shiny_app1.R')
runApp('C:/Users/dksewell/Documents/PRC/projects/study_design_webapp/decision_tree/Shiny_app1.R')
runApp('C:/Users/dksewell/Documents/PRC/projects/study_design_webapp/webapp')
runApp('C:/Users/dksewell/Documents/PRC/projects/study_design_webapp/webapp')
runApp('C:/Users/dksewell/Documents/PRC/projects/study_design_webapp/webapp')
library(devtools)
install.packages("devtools")
library(devtools)
?build
build("C:/Users/dksewell/Documents/linreg/")
knitr::opts_chunk$set(fig.width=12,
fig.height=8,
results='verbatim',
cache=TRUE,
message=F,
warning=F,
progress=FALSE,
echo=TRUE)
if(!require(flextable)){install.packages("flextable");library(flextable)}
if(!require(ExPanDaR)){install.packages("ExPanDaR");library(ExPanDaR)}
if(!require(RColorBrewer)){install.packages("RColorBrewer");library(RColorBrewer)}
if(!require(Matrix)){install.packages("Matrix");library(Matrix)}
if(!require(tidyverse)){install.packages("tidyverse");library(tidyverse)}
if(!require(magrittr)){install.packages("magrittr");library(magrittr)}
if(!require(rstanarm)){install.packages("rstanarm");library(rstanarm)}
if(!require(bayesplot)){install.packages("bayesplot");library(bayesplot)}
if(!require(coda)){install.packages("coda");library(coda)}
if(!require(extraDistr)){install.packages("extraDistr");library(extraDistr)}
if(!require(linreg)){remotes::install_github("dksewell/linreg");library(linreg)}
SENIC = read_csv("https://myweb.uiowa.edu/dksewell/teaching/BIOS5720/1WayANOVA/SENIC.csv") %>%
mutate(npr = log(nNurses/nPatients))
SENIC$Region =
sapply(1:nrow(SENIC),function(x){
switch(as.character(unlist(SENIC$Region[x])),
'1'="NE",
'2'="NC",
'3'="S",
'4'="W")})
( SENIC %>%
prepare_descriptive_table() )$df %>%
rownames_to_column("Variable") %>%
flextable() %>%
colformat_double(digits = 3)
SENIC %>%
ggplot() +
geom_density(aes(x = ,
fill = ),
alpha = 0.4,
adjust = 2) +
theme_bw()
ig_hyperparameters =
find_invgamma_parms(mean = 0.89,
quantile = 0.97,
left_tail_prob = 0.75,
search_bounds = c(1.01,500))
ig_hyperparameters
ig_hyperparameters[2] * 0.5 / (ig_hyperparameters[1] * 0.5 - 1.0)
qinvgamma(0.75,ig_hyperparameters[1] * 0.5, ig_hyperparameters[2] * 0.5)
2+2
library(devtools)
library(RcppArmadillo)
RcppArmadillo.package.skeleton("C:/Users/dksewell/Documents/delete_me")
RcppArmadillo.package.skeleton("delete_me",
path = "C:/Users/dksewell/Documents/")
RcppArmadillo.package.skeleton(name = "delete_me",
path = "C:/Users/dksewell/Documents/")
setwd("C:/Users/dksewell/Documents/")
RcppArmadillo.package.skeleton(name = "delete_me")
RcppArmadillo.package.skeleton()
RcppArmadillo.package.skeleton(name = "deleteMe",
path = "C:/Users/dksewell/Documents/")
?BIC
Rcpp::compileAttributes("C:/Users/dksewell/Documents/WECAN")
# 1. Create a skeleton package
devtools::create("C:/Users/dksewell/Documents/WECAN/")
#3. Use roxygen2 to create Rd help pages
devtools::document("C:/Users/dksewell/Documents/WECAN/")
install.packages("roxygen2")
# 1. Create a skeleton package
devtools::create("C:/Users/dksewell/Documents/WECAN/")
#3. Use roxygen2 to create Rd help pages
devtools::document("C:/Users/dksewell/Documents/WECAN/")
setwd("C:/Users/dksewell/Documents/WECAN/")
usethis::use_mit_license()
#7. Build the tarball
devtools::build(pkg = "C:/Users/dksewell/Documents/WECAN/",
path = "C:/Users/dksewell/Documents/",
vignettes = FALSE)
#8. Install package
pacman::p_unload(all)
install.packages("pacman")
install.packages('C:/Users/dksewell/Documents/WECAN_0.0.0.9000.tar.gz',
repos=NULL,
type='source')
#8. Install package
pacman::p_unload(all)
install.packages('C:/Users/dksewell/Documents/WECAN_0.0.0.9000.tar.gz',
repos=NULL,
type='source')
#4. Compile rcpparmadillo attributes
Rcpp::compileAttributes("C:/Users/dksewell/Documents/WECAN")
#8. Install package
pacman::p_unload(all)
#4. Compile rcpparmadillo attributes
Rcpp::compileAttributes("C:/Users/dksewell/Documents/WECAN")
sessionInfo()
library(MASS)
sessionInfo()
sessionInfo() %>% names()
sessionInfo() |> names()
sessionInfo()$loadedOnly
sessionInfo() |> names()
sessionInfo()$otherPkgs
sessionInfo()
sessionInfo() |> str()
sessionInfo() |> names()
sessionInfo()$R.version |> str()
sessionInfo() |> names()
sessionInfo()$running |> names()
sessionInfo()$basePkgs |> names()
sessionInfo()$basePkgs |> str()
sessionInfo()$otherPkgs |> str()
sessionInfo()$otherPkgs |> names()
sessionInfo() |> names()
sessionInfo()$loadedOnly |> names()
sessionInfo()$loadedOnly |> names() %>% sort()
sessionInfo()$loadedOnly |> names() |> sort()
sessionInfo()$loadedOnly |> str()
sessionInfo()
#7. Build the tarball
devtools::build(pkg = "C:/Users/dksewell/Documents/WECAN/",
path = "C:/Users/dksewell/Documents/",
vignettes = FALSE)
#7. Build the tarball
devtools::build(pkg = "C:/Users/dksewell/Documents/WECAN/",
path = "C:/Users/dksewell/Documents/",
vignettes = FALSE)
#8. Install package
pacman::p_unload(all)
install.packages('C:/Users/dksewell/Documents/WECAN_0.0.0.9000.tar.gz',
repos=NULL,
type='source')
#8. Install package
pacman::p_unload(all)
#4. Compile rcpparmadillo attributes
Rcpp::compileAttributes("C:/Users/dksewell/Documents/WECAN")
#4. Compile rcpparmadillo attributes
Rcpp::compileAttributes("C:/Users/dksewell/Documents/WECAN")
#7. Build the tarball
devtools::build(pkg = "C:/Users/dksewell/Documents/WECAN/",
path = "C:/Users/dksewell/Documents/",
vignettes = FALSE)
#4. Compile rcpparmadillo attributes
Rcpp::compileAttributes("C:/Users/dksewell/Documents/WECAN")
#8. Install package
pacman::p_unload(all)
install.packages('C:/Users/dksewell/Documents/WECAN_0.0.0.9000.tar.gz',
repos=NULL,
type='source')
#7. Build the tarball
devtools::build(pkg = "C:/Users/dksewell/Documents/WECAN/",
path = "C:/Users/dksewell/Documents/",
vignettes = FALSE)
#3. Use roxygen2 to create Rd help pages
devtools::document("C:/Users/dksewell/Documents/WECAN/")
#3. Use roxygen2 to create Rd help pages
devtools::document("C:/Users/dksewell/Documents/WECAN/")
#4. Compile rcpparmadillo attributes
Rcpp::compileAttributes("C:/Users/dksewell/Documents/WECAN")
#7. Build the tarball
devtools::build(pkg = "C:/Users/dksewell/Documents/WECAN/",
path = "C:/Users/dksewell/Documents/",
vignettes = FALSE)
Rcpp::compileAttributes("C:/Users/dksewell/Documents/WECAN")
#8. Install package
pacman::p_unload(all)
install.packages('C:/Users/dksewell/Documents/WECAN_0.0.0.9000.tar.gz',
repos=NULL,
type='source')
library(WECAN)
?wecan
#3. Use roxygen2 to create Rd help pages
devtools::document("C:/Users/dksewell/Documents/WECAN/")
#4. Compile rcpparmadillo attributes
Rcpp::compileAttributes("C:/Users/dksewell/Documents/WECAN")
#7. Build the tarball
devtools::build(pkg = "C:/Users/dksewell/Documents/WECAN/",
path = "C:/Users/dksewell/Documents/",
vignettes = FALSE)
#8. Install package
pacman::p_unload(all)
install.packages('C:/Users/dksewell/Documents/WECAN_0.0.0.9000.tar.gz',
repos=NULL,
type='source')
#8. Install package
pacman::p_unload(all)
library(WECAN)
?wecan
2+2
2+2
library(WECAN)
?wecan
